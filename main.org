#+title: Equation-of-motion coupled-cluster for defects in solids
#+author: Alejandro Gallo
#+date: LCPQ Seminar, Toulouse, 21-01-2021 
#+latex_header: \usepackage{xcolor}
#+latex_header: \usepackage{booktabs}
#+BEAMER_THEME: metropolis
#+OPTIONS: H:2 toc:nil t:nil
#+OPTIONS: TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc

* Presentation
** Who are we?

*** Column 1
    :properties:
    :beamer_col: 0.6
    :end:

- Andreas Grüneis group.
  - Application of quantum chemical methods to solid state
    systems.
  - CCSD, CCSD(T) and EOM-CCSD
  - Embedding schemes and orbital space compatification cite:doi:10.1063/5.0036363
  - Basis-set extrapolation techniques cite:Duality.of.RingIrmler2019
  - Tensor decompositions cite:Low.rank.factorHummel2017
  - \textcolor{orange}{Excited states of defects} cite:2010.15071v1
  - Molecule-surface interactions cite:PeriodicQuantuTheodo
  - Finite-size corrections (CCSD) cite:Applying.the.CoGruber2018

*** Column 2
    :properties:
    :beamer_col: 0.4
    :end:

[[file:figures/tuwien.png]]
[[file:figures/group2019.png]]




* Solid state in a nutshell
** Setting the stage

*** Column 1
    :properties:
    :beamer_col: 0.5
    :end:

- periodic boundary conditions
- \( k \)-point sampling
- Bloch's theorem
- Supercell approach
- ...



*** Column 2
    :properties:
    :beamer_col: 0.5
    :end:

cite:SolidsAndSurf1988Hoffmann
#+attr_latex: :height 0.8\textheight
[[file:figures/hoffmann-cover.jpg]]

** One Hydrogen atom

\begin{equation*}
\phi^\mathrm{1s}
\end{equation*}

#+call: make-hchain("-n 1 -k 0")

#+attr_latex: :height 0.6\textheight
#+RESULTS:
[[file:figures/hchain-base32-FVXCAMJAFVVSAMAK.png]]


** Two Hydrogen atoms (bonding)
   
\begin{equation*}
\phi^{\mathrm{1s}}_{\color{red} 0} + \phi^{\mathrm{1s}}_{\color{red} 1}
= e^{i {\color{red} 0} a k } \phi^{\mathrm{1s}}_{\color{red} 0}
+ e^{i {\color{red} 1} a k } \phi^{\mathrm{1s}}_{\color{red} 1}
\quad k = 0
\end{equation*}
where $a$ is H-H bond length

#+call: make-hchain("-n 2 -k 0")

#+attr_latex: :height 0.6\textheight
#+RESULTS:
[[file:figures/hchain-base32-FVXCAMRAFVVSAMAK.png]]

** Two Hydrogen atoms (\textcolor{red}{anti}-bonding)

\begin{equation*}
\phi^{\mathrm{1s}}_{\color{red} 0} - \phi^{\mathrm{1s}}_{\color{red} 1}
= e^{i {\color{red} 0} a k } \phi^{\mathrm{1s}}_{\color{red} 0}
+ e^{i {\color{red} 1} a k } \phi^{\mathrm{1s}}_{\color{red} 1}
,
\quad k = \frac{\pi}{a}
\end{equation*}

#+call: make-hchain("-n 2 -k 1")

#+attr_latex: :height 0.6\textheight
#+RESULTS:
[[file:figures/hchain-base32-FVXCAMRAFVVSAMIK.png]]

** 6 Hydrogen atoms (bonding)
\begin{equation*}
  \sum_{\color{red} j} \phi^{\mathrm{1s}}_{\color{red} j}
= \sum_{\color{red} j} e^{i{\color{red} j} a k }\phi^{\mathrm{1s}}_{\color{red} j}
,
\quad k = 0
\end{equation*}

#+call: make-hchain("-n 6 -k 0")

#+attr_latex: :height 0.6\textheight
#+RESULTS:
[[file:figures/hchain-base32-FVXCANRAFVVSAMAK.png]]

** 6 Hydrogen atoms (\textcolor{red}{anti}-bonding)

\begin{equation*}
  \sum_{\color{red} j} (-1)^{\color{red} j} \phi^{\mathrm{1s}}_{\color{red} j}
= \sum_{\color{red} j} e^{i{\color{red} j} a k }\phi^{\mathrm{1s}}_{\color{red} j}
,
\quad k = \frac{\pi}{a}
\end{equation*}

#+call: make-hchain("-n 6 -k 3")

#+attr_latex: :height 0.6\textheight
#+RESULTS:
[[file:figures/hchain-base32-FVXCANRAFVVSAMYK.png]]

** 6 Hydrogen atoms (\textcolor{red}{between}-bonding)

\begin{equation*}
  \sum_{\color{red} j} (-1)^{\color{red} j} \phi^{\mathrm{1s}}_{\color{red} j}
= \sum_{\color{red} j} e^{i{\color{red} j} a k }\phi^{\mathrm{1s}}_{\color{red} j}
,
\quad k = \frac{\pi}{2a} \end{equation*}

#+call: make-hchain("-n 6 -k 1.5")

#+attr_latex: :height 0.6\textheight
#+RESULTS:
[[file:figures/hchain-base32-FVXCANRAFVVSAMYK.png]]

** What is a solid?

*** Column 1
  :properties:
  :beamer_col: 0.5
  :end:

- Infinite molecule \( \approx 10^{23} \)

- Model through a finite system, finite box
- Key fact
  - Create repetitions of the cell \Leftrightarrow sample \( k \)-points
  - Thermodynamical limit
    \Leftrightarrow simulate a huge cell
    \Leftrightarrow sample fine \( k \)-point grid



*** Column 2
    :properties:
    :beamer_col: 0.5
    :end:

#+name: simple-lattice-crystal
#+headers: :cache yes
#+begin_src asymptote :file figures/simple-lattice-crystal.pdf
unitsize(1cm);

int n = 4;

for (int i=0; i<n; ++i) {
for (int j=0; j<n; ++j) {
  dot((i,j));
  if (i > 0)                  draw((i,j) -- (i-1, j));
  if (j > 0)                  draw((i,j) -- (i, j-1));
  if (i < n - 1 && j < n - 1) {
     dot((i+.5, j + .5), green);
     dot((i+.65, j + .75), red);
     dot((i+.75, j + .25), blue);
  }

}
}
#+end_src

#+attr_latex: :height 0.6\textheight
#+RESULTS[d2f158e44f5ccf804927cd7978ae0317e560af8c]: simple-lattice-crystal
[[file:figures/simple-lattice-crystal.pdf]]


** Bloch's theorem: infinite hydrogen chain

*** Column 1
    :properties:
      :beamer_col: 0.7
    :end:
    
- Edge effects can be neglected
  - In the thermodynamical limit, the ``molecule'' is efectively
    infinite.
- Periodic boundary conditions \Leftarrow Finite systems
  #+call: make-hchain("-n 10 -k 5 --circle")

  #+attr_latex: :width 0.5\textwidth
  #+RESULTS:
  [[file:figures/hchain-base32-FVXCANRAFVVSAMZAFUWWG2LSMNWGKCQ.png]]
- Translational invariance \Rightarrow
  How do the /symmetry adapted/ molecular orbitals look like?


*** Column 2
    :properties:
    :beamer_col: 0.3
    :end:

#+call: make-hchain("-n 10 -k 5")

#+attr_latex: :options angle=90
#+attr_latex: :height 0.5\textheight
#+RESULTS:
[[file:figures/hchain-base32-FVXCANRAFVVSAMYK.png]]

** Bloch's theorem: stage

*** Column 1
    :properties:
    :beamer_col: 0.7
    :end:

- Bravais lattice \(\mathcal{B} = \{ R \}\)
- Translation operator \(\hat T(R) = e^{i R \cdot \hat k }\)
- Group of translation is commutative
  - one dimensional irreps!
  - eigenvectors of \( \hat{H} \)
    orbitals are eigenvectors of $\hat T (R)$ for all $R\in \mathcal{B}$
  - Bloch's theorem:
    \[
       \hat T(R) \psi = e^{i R \cdot k} \psi,
       \quad k \in \mathbb{R}^3
    \]
  - Bloch orbitals $\{ \psi_k \}$ (symmetry adapted)



*** Column 2
    :properties:
    :beamer_col: 0.3
    :end:


#+headers: :cache yes
#+begin_src asymptote :file figures/simple-lattice.pdf
unitsize(1cm);

int n = 4;

for (int i=0; i<n; ++i) {
for (int j=0; j<n; ++j) {
  dot((i,j));
}
}

draw((0, 0) -- (1, 3), black, Arrow);
draw((0, 0) -- (3, 1), black, Arrow);
#+end_src

#+attr_latex: :height 1\textwidth
#+attr_org: :width 300px
#+RESULTS[119c881b4f9b3a606916564b00b3cb45ac73d321]:
[[file:figures/simple-lattice.pdf]]

#+attr_latex: :height 1\textwidth
[[file:figures/simple-lattice-crystal.pdf]]


** They were Bloch's all along!

*** Column 1
    :properties:
    :beamer_col: 0.7
    :end:

\begin{align*}
\psi_{k, \mathrm{1s}}
  &= \sum_{\color{red} j} e^{ik {\color{red} j} a } \phi^{\mathrm{1s}}_{\color{red} j}
  \\
  \hat T(ma) \psi_{k, 1s}(r)
  &=
  \sum_{\color{red} j}
    e^{ik {\color{red} j} a }
    \phi^{\mathrm{1s}}_{\color{red} j} ( r + m a)
  \\
  &= e^{i k m a}
  \sum_{\color{red} j}
    e^{ik {\color{red} j} a }
    e^{-i k m a}
    \phi^{\mathrm{1s}}_{\color{red} j} ( r + m a)
  \\
  &= e^{i k m a}
  \sum_{\color{red} j}
    e^{ik {\color{red} j} a }
    e^{-i k m a}
    \phi^{\mathrm{1s}}_{\color{red} j - m} ( r )
  \\
  &= e^{i k m a}
  \sum_{\color{red} j}
    e^{ik {\color{red} (j  - m )} a }
    \phi^{\mathrm{1s}}_{\color{red} j - m} ( r )
  \\
  &= e^{i k m a}
     \psi_{k, 1s} (r)
\end{align*}




#+beamer:\pause
- Attention! Change \( k \to \frac{2\pi}{a} n + k \) for all \( n\in \mathbb{Z} \)
  and you get the same.

    

*** Column 2
    :properties:
    :beamer_col: 0.4
    :end:


**** Bloch
\begin{equation*}
T(R) \psi_k (r) = e^{ik \cdot R} \psi_k(r)
\end{equation*}

#+call: make-hchain("-n 10 -k 5 --circle")

#+attr_latex: :width 1.0\textwidth
#+RESULTS:
[[file:figures/hchain-base32-FVXCAMJQEAWWWIBVEAWS2Y3JOJRWYZIK.png]]

#+beamer:\pause
- So \( k \in (- \frac{\pi}{a}, \frac{\pi}{a} ] \)
  and you get the \( s \) band! \textbf{First Brillouin Zone}

** Use your chemical intuition for getting bandstructures

*** Column 1
    :properties:
    :beamer_col: 0.5
    :end:
    
#+begin_center
#+attr_latex: :width 0.2\textwidth :center
call_make-hchain("-n 1 -k 0 ") {{{results([[file:figures/hchain-base32-FVXCAMJAFVVSAMBABI.png]])}}}
\( s \) orbital

#+attr_latex: :width 0.7\textwidth :center
call_make-hchain("-n 6 -k 0 ") {{{results([[file:figures/hchain-base32-FVXCAMJAFVVSAMBABI.png]])}}}
\( k=0 \)

#+attr_latex: :width 0.7\textwidth :center
call_make-hchain("-n 6 -k 3 ") {{{results([[file:figures/hchain-base32-FVXCAMJAFVVSAMBABI.png]])}}}
\( k=\frac{\pi}{a} \)
#+end_center

*** Column 2
    :properties:
    :beamer_col: 0.5
    :end:

#+begin_center
#+attr_latex: :width 0.2\textwidth :center
call_make-hchain("-n 1 -k 0  --nx 1    ") {{{results([[file:figures/hchain-base32-FVXCAMJAFVVSAMBABI.png]])}}}
\( p_x \) orbital

#+attr_latex: :width 0.7\textwidth :center
call_make-hchain("-n 6 -k 0  --nx 1    ") {{{results([[file:figures/hchain-base32-FVXCAMJAFVVSAMBABI.png]])}}}
\( k=0 \)

#+attr_latex: :width 0.7\textwidth :center
call_make-hchain("-n 6 -k 3  --nx 1    ") {{{results([[file:figures/hchain-base32-FVXCAMJAFVVSAMBABI.png]])}}}
\( k=\frac{\pi}{a} \)
#+end_center

** Use your chemical intuition for getting bandstructures II

#+attr_latex: :width 0.1\textwidth :center
call_make-hchain("-n 1 -k 0  --nx 1    ") {{{results([[file:figures/hchain-base32-FVXCAMJAFVVSAMBABI.png]])}}}
#+begin_src gnuplot :file figures/band-structure.pdf
unset tics
set xlabel "k"
set ylabel "E(k)"
set xtics ("Γ" 0, "π/a" pi)
plot -cos(x) title "s band" \
   ,  cos(x) + 2.2 title "px band"
#+end_src

#+RESULTS:
[[file:figures/band-structure.pdf]]

#+attr_latex: :width 0.1\textwidth :center
call_make-hchain("-n 1 -k 0  --nx 0    ") {{{results([[file:figures/hchain-base32-FVXCAMJAFVVSAMBABI.png]])}}}

** Defects and super-cells

*** Column 1
    :properties:
    :beamer_col: 0.5
    :end:
    



#+beamer:\pause
- unit cell with a defect
#+headers: :var n=2 repeat=1
#+name: make-defect-in-lattice
#+begin_src asymptote :file figures/defect-images.pdf
unitsize(1cm);

for (int j=0; j<n; ++j) {
for (int i=0; i<n; ++i) {
  dot((i,j));
  if (i > 0)                  draw((i,j) -- (i-1, j));
  if (j > 0)                  draw((i,j) -- (i, j-1));
  if (repeat == 1)
  if (i < n - 1 && j < n - 1) dot((i+.5, j + .5), red);
}
}

if (repeat == 0) dot((n / 2 - 0.5, n/2 - 0.5), red);

#+end_src

#+attr_org: :width 300px
#+attr_latex: :width 0.2\textwidth
#+RESULTS: make-defect-in-lattice
[[file:figures/defect-images.pdf]]

#+beamer:\pause
- repeating it
#+call: make-defect-in-lattice(n=6) :file figures/defect-images-6.pdf

#+attr_org: :width 300px
#+attr_latex: :width 0.8\textwidth
#+RESULTS:
[[file:figures/defect-images-6.pdf]]

*** Column 2
    :properties:
    :beamer_col: 0.5
    :end:

#+beamer:\pause
- supercell
#+call: make-defect-in-lattice(n=6, repeat=0) :file figures/defect-images-6-no-repeat.pdf

#+attr_org: :width 300px
#+attr_latex: :width 1\textwidth
#+RESULTS:
[[file:figures/defect-images-6-no-repeat.pdf]]

** Quantum chemistry \approx \Gamma-point
- $\Gamma$ point is with \( k = 0 \).
- Integrals and orbitals can be chosen to be real valued.
- Supercell calculations.
  - Important for defect calculations.
  - Periodic boundary conditions
    - Implicit interaction from defect with its periodic image
    - Increase the size of the supercell until no such interaction is important

* Ground-state Coupled-Cluster
** Exponential \textit{Ansatz}
- One of the most successful theories in quantum chemistry
- Restrict to singles and doubles excitations for cluster operator \( \hat T \)
  \begin{equation*}
    \hat T
      = \underbrace{
          \sum_{ai}
            t^a_i
            c^\dagger_a
            c_i
         }_{T_1}
      + \underbrace{
          \frac{1}{4}\sum_{abij}
            t^{ab}_{ij}
            c^\dagger_a
            c^\dagger_b
            c_j
            c_i
        }_{T_2}
  \end{equation*}
- Suppose a single-determinant as a reference  \( |0\rangle \)
  \begin{equation*}
    |\mathrm{CC}\rangle = e^{\hat{T}} |0\rangle
  \end{equation*}
- Note: there are many higher order excitation contributions to the Wavefunction
\begin{equation*}
e^{\hat{T}}
  = \left( 1
    + \underbrace{T_1 + T_2 + \frac{1}{2!} T_1^2}_{\mathrm{CISD}}
    + \frac{1}{2!} \left\{ \underbrace{T_2^2}_\mathrm{quad}
                         + \underbrace{T_1 T_2 + T_2 T_1}_{\mathrm{triples}} \right\}
    + \underbrace{\ldots}_\mathrm{t, q, \ldots}
    \right)
\end{equation*}

** Size-extensivity

- A size-extensive method provides total energies that scale linearly with
  the size of the system.
- Dyson proved that matter is stable
  [[cite:Stability.of.MaFreema1967,Stability.of.MaLenard1968][Dyson 1967-68]]
  - In particular, for charged fermions a lower bound proportional to
    $N$ was found analytically.
- Essential property for solids, can be rephrased as follows
  #+begin_quote
  A size-extensive method does not include additional error in the
  energy \textcolor{red}{by increasing} the size of the system.
  #+end_quote

** CCSD equations                                                  :noexport:
- The Schrödinger equation is non-linear now
  \begin{equation*}
  \hat H e^{\hat T} |0\rangle = E_{\mathrm{CC}} e^{\hat T}|0\rangle
  \quad \Rightarrow \quad
  \underbrace{e^{-\hat T} \hat H e^{\hat T}}_{\bar{H}} |0\rangle = E_{\mathrm{CC}} |0\rangle
  \end{equation*}
- Solve it projectively

\begin{align*}
\begin{matrix}
  E_{\mathrm{CC}} &=& \langle{0}| \bar{H} |{0}\rangle
  &
  =
  &
  \frac{1}{4}
  V^{{\color{red}ij}}_{{\color{red}ab}} T^{{\color{red}ab}}_{{\color{red}ij}} + \ldots
  \\
  0  &=& \langle{0}|
          \hat{a}^{\dagger}_{i}\hat{a}_{a} \bar{H}
        |{0}\rangle
  &
  =
  &
    f^{a}_{\color{red} b} t^{{\color{red}b}}_{i}
  - f^{j}_{\color{red} i} t^{a}_{{\color{red}j}}
  + \ldots
 \\
  0  &=& \langle{0}|
          \hat{a}^{\dagger}_{i}\hat{a}^{\dagger}_{j}
          \hat{a}_{b} \hat{a}_{a}
        \bar{H}
        |{0}\rangle
  &
  =
  &
    f^{b}_{\color{red} c} t^{a{\color{red}c}}_{ij}
  + f^{a}_{\color{red} c} t^{{\color{red}c}b}_{ij}
  + \ldots
\end{matrix}
\end{align*}

- Start with an intial guess of $t^{ab}_{ij} = V^{ab}_{ij}$ and iterate (and hope for the best)

- Typical scaling $\mathcal{O}(N^6)$
* Equation-of-motion Coupled-cluster
** In a nutshell

*** Column 1
    :properties:
    :beamer_col: 0.5
    :end:
    


#+header: :file figures/eom-nutshell.pdf :border 1em
#+header: :packages '(("" "tikz")) :cache yes
#+begin_src latex :results file raw
  % Define block styles
  \usetikzlibrary{shapes,arrows,positioning}
  \begin{tikzpicture}%
  [ :circle/.style={draw, circle}
  , :rect/.style={draw, rectangle}
  , node distance=2cm
  ]
  \node[:rect                   ] (H) {$\hat H$};
  \node[:circle, red, right of=H] (T) {$\hat T$};
  \node[:rect, blue, below of=T] (ST) {$\bar H$};
  \node[:rect, blue, below of=ST] (CI) {$\{\hat R, E_R\}$};
  \draw[->] (H) edge node [above] {CC} (T);
  \draw[->] (T) edge  node [left] {$e^{-\hat T} \hat H e^{\hat T}$} (ST);
  \draw[->] (ST) edge node [right] {CI} (CI);
  \end{tikzpicture}
  #+end_src

#+attr_org: :width 300px
#+attr_latex: :width 1\textwidth
#+RESULTS[6d8523f933caff237afd462c8c7f30a059f1a71d]:
[[file:figures/eom-nutshell.pdf]]

*** Column 2
    :properties:
    :beamer_col: 0.5
    :end:
#+beamer:\pause
- Excited states
  \begin{align*}
    \hat{R} &= r_{0}
            \\
            &+ \sum_{a,i} r^a_i \hat{a}^{\dagger}_{a}\hat{a}_{i}
            \\
            &+ \frac{1}{4}
              \sum_{a,b,i,j}
                r^{ab}_{ij}
                \hat{a}^{\dagger}_{a} \hat{a}^{\dagger}_{b}
                \hat{a}_{j}         \hat{a}_{i}
            \\
            &+ \ldots
  \end{align*}
\begin{align*}
|R\rangle &= \hat R e^{\hat T} |0\rangle
\\
H|R\rangle &= E_R |R\rangle
\end{align*}
#+beamer:\pause
- So it's just CI, right?
  
** Why not just (truncated) CI?
   :properties:
      :BEAMER_OPT: allowframebreaks
   :end:

- Dressing a Hamiltonian has many consequences
  - Transcorrelated hamiltonians (Jastrow)
  - Effective Hamiltonians in multi-reference
  - In the extreme case, you can understand the $\hat T_{\mathrm{FCC}}$ as a dressing
    that renders the single-reference determinant \( |0\rangle \)
    as having the exact many-body energy
    \begin{equation*}
    \bar H |0\rangle = E_{\mathrm{FCI}} |0\rangle
    \end{equation*}
  - Taylor the zeros of your many body Hamiltonian:
    \begin{equation*}
    \bar H
      = \left(\begin{matrix}
          E_\mathrm{0}  & ?            & ?   \\
        0              & \mathrm{SS}  & \mathrm{SD} \\
        0              & \mathrm{DS}  & \mathrm{DD} \\
        \end{matrix}\right)
    \end{equation*}
- \( n \)-bodyness
  - No dressing \Rightarrow with S and D we use all ingredients of \( \hat H \)
  - With dressing with EOM-CCSD we ignore some \( n \)-body terms
    of the 6-body Hamiltonian
    \begin{equation*}
      \left\langle \begin{matrix}a_1 & \cdots &  a_6 \\ i_1 & \cdots & i_6 \end{matrix} \right| \bar
         H
      \left| 0 \right\rangle
      =
      V^{{\color{red}i}{\color{blue}j}}_{{\color{green}a}{\color{orange}b}}
      T^{a_{1}a_{2}}_{{\color{red}i}i_{1}}
      T^{a_{3}a_{4}}_{{\color{blue}j}i_{2}}
      T^{{\color{green}a}a_{5}}_{i_{3}i_{4}}
      T^{{\color{orange}b}a_{6}}_{i_{5}i_{6}}
    \end{equation*}
#+beamer:\pause
- BUT, not size-extensive@@beamer:\pause@@\textcolor{red}{-ish}!!

** Connection to linear response CC: size-extensivity
- Temporal disturbance \( \hat H (t) = \hat H + \hat{V} e^{-i \omega t} + \hat{V}^\dagger e^{+i \omega t} \)
- Linear response \( \hat T(t) = \hat T + \hat R e^{-i \omega t} + \hat{R}^\dagger e^{+i\omega t}\)
- \( \hat H |\Psi\rangle = i \partial_t |\Psi\rangle  \)
  with
  \( |\Psi\rangle(t) = e^{-i E_{\mathrm{CC}}t} e^{\hat T(t)} |0\rangle \)
  - It's still an exponential ansatz
  - Size extensivity
- Substitute everything in SE and keep only \textcolor{red}{linear terms}
  in \( e^{-i\omega t} \) \Rightarrow equation for \( \hat R \)
  \begin{equation*}
    \hat H \hat R e^{\hat T} |0\rangle
    = (E_{\mathrm{CC}} + \omega) \hat R e^{\hat T} |0\rangle
  \end{equation*}
- For this one uses the fact that
  \begin{equation*}
    [\hat T, \hat R ] = 0
  \end{equation*}
  so it suffices if \( \hat R \) has the same form of particle-hole
  creation operators.



* \( F \)-centers

** Introduction

- Color centers (german: \textcolor{red}{F}arbzentren)
- Vacancies, di-vacancies, trapped electrons \ldots
- Important for benchmarking and some practical applications.
  - Bulk defects of materials affected by defects.
  - Luminescence properties.
  - Single photon emitters.
  - Quantum computers.
  - Simplest playground for excitations in solids.
- Often described as molecules embedded in a solid.
- \( \Gamma \)-point calculations.
- Doubly cursed:
  - Basis-set convergence
    - \(G_{\mathrm{max}} \to \infty\): extrapolate!
    - \(N_v \to \infty\): extrapolate!
  - Finite-size convergence (cell \( \to \infty \)): extrapolate again! 
    #+beamer:\pause
    - Remember, PBC
      \Rightarrow defect-defect interaction


** MgO
- O vacancy

  #+attr_latex: :width 0.5\textwidth
  [[file:figures/mgo_geometry.pdf]]

- \( s \)-like defect orbital with two trapped electrons.
- \( p \)-like defect orbitals where excitations are made.
- These orbitals is where physics happens
  - If the excited orbitals do not hybridize /much/ with delocalized bulk
    conduction band orbitals.


** MgO: defect orbitals

*** Column 1
    :properties:
    :beamer_col: 0.3
    :end:
    
- No chance to correlate all electrons.
- Choose physical active space (2 to 9 electrons)

*** Column 2
    :properties:
    :beamer_col: 0.7
    :end:

[[file:figures/mgo_chg.pdf]]


** Luminescence

*** Column 1
    :properties:
    :beamer_col: 0.5
    :end:
   
- CCSD Groundstate \( {}^1A_{\mathrm{CC}} \)
- EOM-CCSD excited states \( {}^1T \) and \( {}^3T \)
- Franck-condon process
  - Absorption \( {}^1A_{\mathrm{CC}} \to {}^1T \)
  - Structure relaxation
  - Intersystem crossing (Singlet \to Triplet)
  - Photoemission from \( ^3T \) to ground state



*** Column 2
    :properties:
    :beamer_col: 0.5
    :end:

#+attr_latex: :width 0.99\textwidth
[[file:figures/mgo-multiplets.pdf]]
[[file:figures/mgo_geometry.pdf]]

** Extrapolation

*** Column 1
    :properties:
    :beamer_col: 0.5
    :end:


- Big cells have to be used \approx 120 atoms and \approx 1000e.
- Extrapolate with number of virtuals \( N_v \)
- Extrapolate for various sizes of cell sizes



*** Column 2
    :properties:
    :beamer_col: 0.5
    :end:
    
#+attr_latex: :width 0.99\textwidth
[[file:figures/mgo-basis-extrapolation-nblow-505-ignore-4.pdf]]

** Some results


\begin{tabular}{llll}
    %
    %
\toprule
System & Method & Absorption & Emission \\
    %
    %
\midrule
    %
    %
MgO & \textcolor{orange}{EOM-CCSD@HF}                       & 5.28   & 3.66  \\
    & Exp.~\cite{ELECTRONIC.STRUWILSON1976}                 & 5.0    & 2.4   \\
    & QMC.~\cite{PointDefectOperteki2013}                   & 5.0(1) & 3.8(1)\\
    & CASPT2~\cite{OnTheAccuratesousa2001}                  & 5.44   & 4.09   \\
    & $G_0W_0$@LDA0-BSE.~\cite{First.PrincipleRinke.2012}   & 4.95   & 3.4   \\
    %
    %
\midrule
    %
    %
%\pause
CaO & \textcolor{orange}{EOM-CCSD@HF}                    & 3.13   & 1.93 \\
    & Exp.~\cite{LuminescenceSpbates1974,%
                  HighTemperaturbates1975}               & 3.02   & 1.93 \\
    & Exp.~\cite{ELECTRONIC.STRUWILSON1976}              & 3.1     & 2.05 -- 2.01\\
    & TDDFT@B3LYP~\cite{OpticalAbsorptcarras2006}        & 3.52    & 2.1  \\
    & $G_0W_0$@PBE~\cite{PredictionOfOtosoni2012}        & 3.20    &      \\
    %
    %
\midrule
    %
    %
%\pause
SrO & \textcolor{orange}{EOM-CCSD@HF}             & 2.34 & 1.2\\
    & Exp.\cite{ELECTRONIC.STRUWILSON1976} & 2.4  &    \\
    %
    %
\bottomrule
    %
    %
\end{tabular}


** Future directions

- More challenging defects
- Better extrapolation schemes (/in preparation/)
- Clearer picture of transitions including electron-phonon coupling.

* Summary
** Thank you
#+begin_center
Thank you!
#+end_center

#+attr_latex: :width 0.6\textwidth
[[file:figures/group2019.png]]
#+begin_center
Andreas Grüneis, Nikolaos Masios, Thodoris Tsatsoulis, Felix Hummel,
Andreas Irmler, Alejandro Gallo, Faruk Salihbegovic, Tobias Schäfer
#+end_center

#+begin_center
#+attr_latex: :width 0.2\textwidth :center
[[file:figures/tuwien.png]] [[file:figures/LOGO_ERC.jpg]]
#+end_center

** Bibliography
   :properties:
      :BEAMER_OPT: allowframebreaks
   :end:
bibliographystyle:unsrt
bibliography:main.bib,~/Documents/papers/bibfile.bib
* ~CC4S~
** VASP
- Plane waves
  \begin{equation*}
    \psi_k (r) = \sum_G^{G_{\mathrm{max}}} C^{k}(G) e^{i G \cdot r}
  \end{equation*}
- Easier to describe delocalized electrons
  - Core electrons hopefully well described by pseudo-potentials
  - Projector-Augmented-Wave (PAW) in the case of VASP cite:Projector.augmeBlochl1994
- One parameter \( G_{\mathrm{max}} \)

** Tensor frameworks

- Cyclops tensor framework
  https://github.com/cyclops-community/ctf
  cite:A.massively.parSolomo2014

- Easily write tensor contractions massive parallelly
  \begin{equation*}
    r^{ab}_{ij}
    = \sum_{cdkl}
      t^{a {\color{red}c}}_{i {\color{red}k}}
      V^{{\color{red}k } {\color{blue}l}   }_{{\color{red}c}  {\color{blue}d}}
      t^{{\color{blue}d} b}_{{\color{blue}l} j}
  \end{equation*}
  turns into ~MPI~ C++ as
  #+begin_src c++
    r["abij"] = t["acik"] * v["klcd"] * t["dblj"];
  #+end_src

* Scripts                                                          :noexport:
  :properties:
    :header-args: :comments both
    :header-args:python: :tangle-mode (identity #o777)
    :header-args:python+: :shebang #!/usr/bin/env python
  :end:
** Makefile

#+headers: :tangle Makefile
#+begin_src makefile
define PYTHON
nix-shell --run "python $(1)"
endef

define PIP
nix-shell --run "pip $(1)"
endef
#+end_src

** Nix shell

If you used the nix package manager you can use the supplied
shell to compile the examples.

#+begin_src nix :tangle shell.nix

{ pkgs ? import <nixpkgs> {} }:
let
    chbench = import ./nix/chbench.nix {};
    my-python-packages = pypkgs: with pypkgs; [
      matplotlib
      numpy
      pip
      setuptools
      chbench
      tkinter
      virtualenv
    ];
    my-python = pkgs.python37.withPackages my-python-packages;
in
pkgs.mkShell rec {
  buildInputs = with pkgs; [
    my-python
    stdenv.cc.cc.lib
  ];
  shellHook = "
  LD_LIBRARY_PATH=${pkgs.stdenv.cc.cc.lib}/lib:$LD_LIBRARY_PATH;
  ";
}

#+end_src

and we need for chbench a nix package
#+headers: :tangle nix/chbench.nix :mkdirp yes
#+begin_src nix

{pkgs ? import <nixpkgs> {}}:

with pkgs.python37Packages;

buildPythonPackage rec {
  name = "chbench";
  src = pkgs.fetchFromGitHub { owner = "alejandrogallo";
                               repo = "chbench";
                               rev = "f0d789d85fbaae831f1f9747d201ff4360d43e7e";
                               sha256 = "01yjsqlgjhngzgy17kxbx3z4ywgcnjfkqx603hqg8c7fk4rxriam";
                             };
  propagatedBuildInputs = [ pytest numpy ase matplotlib ];
}

#+end_src



** H Chain
   :properties:
    :header-args+: :tangle scripts/make-hchain.py
   :end:

#+begin_src python
import numpy as np
import matplotlib.pyplot as plt
from chbench.basis import *
from chbench.visualization import *
import chbench.parser.basis
import sys
import argparse

plt.rcParams['xtick.bottom'] = False
plt.rcParams['xtick.labelbottom'] = False
plt.rcParams['ytick.left'] = False
plt.rcParams['ytick.labelleft'] = False
plt.gca().set_aspect('equal')

parser = argparse.ArgumentParser("")
parser.add_argument("-o", help="Output file", type=str)
parser.add_argument("-n", help="Number of hydrogens", type=int)
parser.add_argument("-k", help="K", type=str)
parser.add_argument("-a", help="Hidrogen bond length", type=float, default=0.74)
parser.add_argument("--alpha", help="Alpha of orbital", type=float, default=2)
parser.add_argument("--nx", help="nx of gaussian orbital", type=int, default=0)
parser.add_argument("--ny", help="ny of gaussian orbital", type=int, default=0)
parser.add_argument("--nz", help="nz of gaussian orbital", type=int, default=0)
parser.add_argument("--circle",
                    help="nz of gaussian orbital", action="store_true")
args = parser.parse_args()

N = args.n
ki = float(eval(args.k))

nx = 400
ny = nx

if args.circle:
    hydrogens = np.array([[args.a * np.sin(2*np.pi / N * i),
                           args.a * np.cos(2*np.pi / N * i),
                           0] for i in range(N)])
else:
    hydrogens = np.array([[i * args.a, 0, 0] for i in range(N)])

max_x = np.max(hydrogens[:,0])
max_y = np.max(hydrogens[:,1])
min_x = np.min(hydrogens[:,0])
min_y = np.min(hydrogens[:,1])

pad = 1
xlims = [min_x - pad, max_x + pad]
ylims = [min_y - pad, max_y + pad]

#+end_src

and we put the modulator function which is just

$$
e^{i x k_i \frac{2 \pi}{aN}}
$$

#+begin_src python
def modulator(x, ki):
    return np.exp(np.complex(0,1) * x * ki * 2 * np.pi / (args.a * N))

s = GaussianOrbital(args.alpha, args.alpha, args.alpha,
                    args.nx, args.ny, args.nz,
                    [0, 0, 0])


print('Building new coeffs')
coefficients = [modulator(i * args.a, ki) for i in range(N)]

print('Building new gaussians')
gaussians = [s.translate(h) for h in hydrogens]

print('Building new cgaussians')
b = ContractedGaussian(coefficients, gaussians)

print('Building new surface')
surface = plot_gaussian_xy(xlims,
                           ylims,
                           nx,
                           ny,
                           lambda x,y,z: np.real(b(x,y,z)),
                           z=0,
                           fill=True)

for i, g in enumerate(gaussians):
    newg = g * coefficients[i]
    gxlims = [i * args.a -1 , i * args.a +1] #[g.center[0] - 1, g.center[0] + 1]
    plot_gaussian_xy(xlims, ylims,
                     nx, ny,
                     lambda x,y,z: np.real(newg(x,y,z)),
                     z=0,
                     fill=False,
                     alpha=0.1, colors='k')

plt.scatter(hydrogens[:,0], hydrogens[:,1], color='r')

#plt.xlabel(r'$k = \frac{{2\pi}}{{aN}}{k}$'.format(k=args.k))

plt.gcf().tight_layout()
plt.savefig(args.o)
print(args.o)
#+end_src

and for the makefile we need to do
#+headers: :tangle Makefile
#+begin_src makefile

HCHAIN_FLAGS ?= -n 5 -k 0

define hchain_hash
$(shell echo "$(HCHAIN_FLAGS)" | base32 -w0  | tr -d '=')
endef

hchain: figures/hchain-base32-$(call hchain_hash).png scripts/make-hchain.py
	@printf $<

figures/hchain-base32-%.png: scripts/make-hchain.py
	$(call PYTHON,./$< $(shell base32 -id <<< $*) -o $@)

.PHONY: hchain

#+end_src

and the script for making
#+name: make-hchain
#+headers: :var flags="-n 1 -k 0" :tangle no
#+begin_src sh :results value file :exports results
make hchain HCHAIN_FLAGS="$flags" | tail -1
#+end_src
